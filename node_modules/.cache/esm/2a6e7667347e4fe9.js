let express,registerController,loginController,productController,userController,refreshController,auth;_347‍.x([["default",()=>_347‍.o]]);_347‍.w("express",[["default",["express"],function(v){express=v}]]);_347‍.w("../controllers",[["registerController",["registerController"],function(v){registerController=v}],["loginController",["loginController"],function(v){loginController=v}],["productController",["productController"],function(v){productController=v}],["userController",["userController"],function(v){userController=v}],["refreshController",["refreshController"],function(v){refreshController=v}]]);_347‍.w("../middlewares/auth",[["default",["auth"],function(v){auth=v}]]);


const router  = express.Router();

router.post('/register' , registerController.register) // for handeling a new users login 
// user register logic


// for login user
router.post('/login' , loginController.login) 


//  who am i

router.get('/me' , auth,userController.me)

// refresh token
router.post('/refresh' , refreshController.refresh)

// for logout

router.post('/logout' , auth , loginController.logout)

// create a products routes

router.post('/products' , productController.store)


_347‍.d(router);