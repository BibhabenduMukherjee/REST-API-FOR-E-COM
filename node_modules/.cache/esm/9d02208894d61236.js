let Joi,REFRESH_SECRET,RefreshToken,User,CustomErrorHandler,JwtService;_94d‍.x([["default",()=>_94d‍.o]]);_94d‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_94d‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_94d‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_94d‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_94d‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const refreshController =
{

    async refresh(req, res, next) {
        const refreshSchema = Joi.object({
            refresh_token: Joi.string().required(),

        })


        const { error } = refreshSchema.validate(req.body)

        if (error) {
            return next(error)
        }

        // database check
        let refreshtoken
        try {
            refreshtoken = await RefreshToken.findOne({ token: req.body.refresh_token })
            if (!refreshtoken) {
                return next(CustomErrorHandler.unAuthorized('Invalid Refresh Token'))
            }

            let userId

            try {
                const { _id } = await JwtService.verify(refreshtoken.token, REFRESH_SECRET)
                userId = _id
            } catch (err) {
                return next(CustomErrorHandler.unAuthorized('Invalid Refresh Token'))

            }

            // check user is present in the database

            const user = await User.findOne({ _id: userId })

            if (!user) {
                return next(CustomErrorHandler.unAuthorized('No User Find'))
            }

            // token   
            const acces_token = JwtService.sign({ _id: user._id, role: user.role })
            const refresh_token = JwtService.sign({ _id: user._id, role: user.role }, '1y', REFRESH_SECRET)
            await RefreshToken.create({ token: refresh_token })

            res.json({ acces_token, refresh_token })
        } catch (err) {
            return next(new Error('Somthing went wrong' + err.message))
        }

    }
}

_94d‍.d(refreshController);